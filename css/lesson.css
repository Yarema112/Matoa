.wrapper {
	overflow: hidden;
	min-height: 100%;
	background-color: #333;
	padding: 30px;

}

.header {}

.main {}



/* УРОК 14 ФЛЕКС */

/* Flexbox - це цілий модуль, який має цілий набір властивостей і значень як для материнського Flex-контейнера так і для дочірніх Flex-елементів. Основною перевагою гнучкої FLEX розмітки є можливість змінювати ширину і висоту простору довкола і порядок Flex-елементів, для того щоб найкраим способом заповнити доступний простір Flex-контейнера. Також можна змінювати порядок Flex-елементів при цьому не змінюючи html */

/* 
Включення флекс-модуля
display: flex;

Відбувається дві речі:
1) флекс-елементи висторілись в одну вісь-Х, вісь-Х це основна вісь. Флекс елементи ніби стають блочно-строчними, різниця полягає лиш у тому що блочно-строчні елементи при зменшуванні контейнера перескакують у іншу строку, а флекс елементи нікуди не перескакують.
2)Флекс-контейре стає блочним на всю ширину екрана


display: inline-flex;
Відбувається все теж саме що і із display: flex; АЛЕ сам материнський флекс-контейнер стає блочно-строчним
*/


/* РОБОТА З ФЛЕКС КОНТЕЙНЕРОМ

display: flex;
	flex-wrap: - Відповідає за те як будуть себе вести флекс елементи коли не поміщаються в контейнері.
	
	flex-wrap: nowrap; - властивість по замовчуванню, флекс елементи не будуть переміщуватися якщо не поміщаються у флекс-контейнері (материнському флекс-контейнері)


	flex-wrap: wrap; - тепер флекс елементи будуть переміщуватися якщо не поміщаються у контейнері (материнському флекс-контейнері) на наступну строку один під одного. 
	По замовчуванню ця штука викл, нам потрібно завжди включати flex-wrap: wrap;



	justify-content: - Визначає вирівнювання на основній осі (Вісь Х) (напрямок залежить від значення властивості flex-duration). УПРАВЛЯЄ вільним простором в середені флекс-контейнера. Якщо нема вільного простору нічого працювати не буде!!!


	justify-content: flex-start; - властивість по замовчуванню, визначає напрямок флекс елементів з ліва на право.


	justify-content: flex-end; - задає напрямок флекс елементів з права  на ліво.


	justify-content: flex-center; - всі флекс елементи розмістяться по центру флекс-контейнера.


	justify-content: space-between; - розкидує всі флекс-ел таким чином щоб між флекс-ел був одинаковий спільний простір, при чому самий лівий і праий будуть прибиті до стінок флекс-контейнера. Це не падінг!


	justify-content: space-around; - розкидує всі флекс-ел таким чином щоб між флекс-ел був свій влсаний простір.

	justify-content: space-evenly; - розкидує всі флекс-ел таким чином щоб між флекс-ел простір був розподілений одиноково в тому числі для самого лівого і правого елемента.

	================================
	*/

/* align-items: задає вирівнювання по осі Y.
(напрямок залежить від значення властивості flex-duration). УПРАВЛЯЄ вільним простором в середені флекс-контейнера. Якщо нема вільного простору нічого працювати не буде!!!


stretch; за замовчуванням

flex-start; положення елементів у верху 

flex-end; положення елементів у низу 

flex-center; положення елементів по центру 

baseline; вирівнює елементи по лінії шрифта

*/

/* flex-direction: Встановлює основну вісь, таким чином спрямовує флекс-елементи розміщених у флекс-контейнері


row; за замовчуванням (ряд) флекс-елементи розташовуютиься в ряд

row-reverse; флекс-елементи розташовуютиься в ряд з іншого боку (з права), при цьому елементи повність дзеркально розвертаються з (1 2 3 4) на (4 3 2 1). При цьоу вісь Х теж змінює напрямок і сатє рухатися з права на ліво

column; змінюються осі, головна вісь стає Y, елементи розташовуюються з верху вниз

column-revrse; змінюються осі, головна вісь стає Y, елементи розташовуюються з низу вверех.


*/


/* РОБОТА З ФЛЕКС ЕЛЕМЕНТОМ

На окремий флекс елемент можна впливати чере клас, модифікатор (звернення напряму) або чере :nth-child()

align-self: - переписує вирівнювання для окремого флекс елемента по осі Y. (напрямок залежить від значення властивості flex-duration).

stretch; - по замовчуванню
flex-start;
flex-end;
center;


align-content: Виривнює по осі Y, при наявності вільного простору і елементи розміщені в 2 або більше рядків (напрямок залежить від значення властивості flex-duration).

stretch; - по замовчуванню
flex-start;
flex-end;
center;

	align-items: Виривнює по осі Y,

	stretch; - по замовчуванню
	flex-start;
	flex-end;
	center;

*/
/*
Управління відстанню між флекс-елементами (прописується в контейнері)(на подобі мерджінга). ВІдступи будуть тільки між елементами

gap: 50px; -відступ у 50px по Х і Y осі
row-gap: - відступ між рядкми ( Х - горизонталь)
column-gap: відступ між колонками ( Y - вертикаль)

УНІВЕРСАЛЬНИЙ ЗАПИС  gap: row-gap(px) column-gap(px)

===


Управління розміром флекс-елементів

flex-basis: - визначає бажаний розмір флекс-ел якщо у контейнері є вільне місце і тільки по осі X (висотою регулюється - height:), можна вказувати px або %. Якщо вказувати flex-direction:row/row-reverce то flex-basis: буде вказувати ширину флекс-ел.

auto; - за замовчуванням, залежить від розміру контента

flex-basis:200px; - задає конкретну ширину елемента ТІПА width:200px;

=================




flex-grow: -відповідає за розширення флекс елементів заповнюючи весь вільний простір, якщо flex-grow: задати тільки одному елементу то він буде збільшуватись доки не займи весь простір а інші елементи збережуть свій  розмір у межах свого контента. При заданому точному розмірі елемента (flex-basis:200px) flex-grow: 1; збільшить елемент при наявному вільному просторі

0; - не діє
1; - діє
flex-basis:200px;
flex-grow:1; Така комбінація це ТІПА min-width:200px;


flex-shrink: - визначає здатність елемента зменшуватися в розмірі, при необхідності заповнюючи весь флекс-контейнер

0; - не діє
1; - діє
flex-basis:200px;
flex-shrink:1; Така комбінація це ТІПА max-width:200px;

flex-basis:200px;
flex-grow:1; 
flex-shrink:1;Така комбінація буде дозволяти елементу ставати вужчим за 200px або ширшим за 200px

flex: 0 0 200px; - визначає можливість зменшуватися, збільшуватися та зафіксувати ширину елемента (універсальний запис), при необхідності заповнює весь флекс контейнер. (перша цифра це flex-grow а друга це flex-shrink, третя це flex-basis)
0; - не діє
1; - діє


Як задати колонки з рівною широною на весь флекс-контейнер?

flex: 0 0 33.333%; - задається для всіх флекс елементів, при цьому кожен елемент буде займати 1/3 місця у флекс-контейнері незалежно від розміру флекс контейера

*/

/* 
order: - дозволюя змінювати порядок флекс елементів без зміни структури html. При цьому звернення має бути до кожного флекс-елемента через клас або nth-child. Вказується порядковий номер 1 2 3 4 5 6 і тд

.block__element:nth-child(1) {
order: 3; - перший елемент у html  буде третім
}
.block__element:nth-child(2) {
order: 2;
}
.block__element:nth-child(3) {
order: 1; третій елемент у html  буде першим
}


*/

/* Як зробити відступ для флекс елемента???
Для цього у структурі html контент флекс елемента обгортаємо у Div...

				<section class="block__element">
					<!-- контент всередині флекс елемента -->
					<div class="block__content">3</div>
				</section>

...і вже задаємо padding для самого контента ("block__content"). 

*/

/*  калькулятор css

flex: 0 1 calc(33.33% - 30px);

calc() - це функція CSS, яка дає можливість розрахувати значення властивостей CSS під час їх визначення (+, -, *, /). Вона може бути використана ВСЮДИ, де застосовуються <length>, <frequency> (en-US), <angle>, <time>, <number> або <integer>

width: calc(10px + 100px);
width: calc(100% - 30px);
width: calc(2em * 5);

Примітка: Оператори + і - завжди повинні бути по об'ємним сторонам відділені пробелом. Виображення calc(50% -8px) буде інтерпретовано як розмір у відсотках і наступне за ним негативне число в пікселях (не вірне виображення), в цей час як calc(50% - 8px) - правильне виображення, буде інтерпретовано як вичитання з відсотків довжини. в пікселях. Оператори * і / не вимагають відділення від операндів знаком пробела, але це не заборонено і навіть приветствуется. Ділення на нуль видасть помилку у html.


*/
.main {
	background-color: gray;
	height: 300px;
}

.block {
	border: 10px solid #794f45;
	display: flex;
	flex-wrap: wrap;
	margin: 0 -10px;
	/*gap:20px*/

}

.block__element {
	/*border: 10px solid #7a956b;*/
	padding: 0 20px;
	font-size: 30px;
	color: #fff;
	flex: 0 1 calc(33.33% - 30px);


}

.block__content {
	background-color: #ff0000;
	height: 100%;
	padding: 0 20px;
}